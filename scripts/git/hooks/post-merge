#!/bin/bash
# LawnSync post-merge hook
# Notifies of any branches that need updating after a merge

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== LawnSync Post-Merge Check ===${NC}"

# Get the current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Update remote refs
git fetch --quiet

# If we're on development and a merge occurred, check master
if [ "$CURRENT_BRANCH" = "development" ]; then
    # Check if development is ahead of master (has changes that master doesn't)
    ahead=$(git rev-list --count origin/master..HEAD 2>/dev/null || echo "0")
    
    if [ "$ahead" -gt 0 ]; then
        echo -e "${YELLOW}NOTE: development is ahead of master by $ahead commit(s).${NC}"
        echo -e "${YELLOW}Consider creating a pull request to update master.${NC}"
    fi
fi

# If we're on master and a merge occurred, check development
if [ "$CURRENT_BRANCH" = "master" ]; then
    # Check if any branches need updating now that master has changed
    behind_branches=""
    
    # Loop through all local branches except master
    for branch in $(git branch | grep -v "^\* master" | sed 's/^..//' | grep -v "master"); do
        # Check if branch exists in remote
        if git show-ref --verify --quiet refs/remotes/origin/$branch; then
            # Check if branch is behind master
            if git merge-base --is-ancestor $branch HEAD; then
                behind=$(git rev-list --count $branch..HEAD 2>/dev/null || echo "0")
                
                if [ "$behind" -gt 0 ]; then
                    behind_branches="$behind_branches\n  - $branch is behind master by $behind commit(s)"
                fi
            fi
        fi
    done
    
    if [ -n "$behind_branches" ]; then
        echo -e "${YELLOW}The following branches should be updated with changes from master:${NC}"
        echo -e "$behind_branches"
        echo -e "${YELLOW}Run the git-sync.sh script to synchronize branches.${NC}"
    else
        echo -e "${GREEN}All tracked branches are up-to-date with master.${NC}"
    fi
fi

# Check for feature branches that might need updating
echo -e "${YELLOW}Checking if other branches need updating...${NC}"

# Only proceed if we're on development or master
if [ "$CURRENT_BRANCH" = "development" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    need_update=false
    
    for branch in $(git branch | grep -v "^\*" | sed 's/^..//'); do
        # Skip master and development branches
        if [ "$branch" = "master" ] || [ "$branch" = "development" ]; then
            continue
        fi
        
        # Check if branch is behind current branch
        if git merge-base --is-ancestor $branch HEAD; then
            behind=$(git rev-list --count $branch..HEAD 2>/dev/null || echo "0")
            
            if [ "$behind" -gt 0 ]; then
                if [ "$need_update" = false ]; then
                    echo -e "${YELLOW}Feature branches that need updating:${NC}"
                    need_update=true
                fi
                
                echo -e "  - ${YELLOW}$branch${NC} (behind by $behind commit(s))"
            fi
        fi
    done
    
    if [ "$need_update" = false ]; then
        echo -e "${GREEN}No feature branches need updating.${NC}"
    else
        echo -e "${YELLOW}To update a feature branch:${NC}"
        echo -e "  git checkout <branch-name>"
        echo -e "  git merge $CURRENT_BRANCH"
    fi
fi

echo -e "${BLUE}=== Post-Merge Check Completed ===${NC}"